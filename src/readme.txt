深入理解7816（2）---关于ATR
智能卡（此处主要指接触式CPU卡）本身始终处于被动的状态，所以终端设备在和智能卡进行数据交互的时候，
需要首先给智能卡发指令，智能卡才会对应地给出应答。而智能卡告诉终端的第一句话就是ATR，亦即“复位应答”。

想象一下，如果让你为智能卡设计一个通讯协议，该怎么设计？

因为ATR是智能卡上电后说的第一句话，所以一定要确保这句话被准确地接收。在设计通讯协议的时候有必要设计
一个可以让收发双方进行“握手”的“同步头”，如果接收方能够正确解析同步头数据，那么双方就可以在默认的参
数下正确地进行后续的通讯。ATR里面的第一个字符TS就相当于这个“同步头”。如果终端给卡片上电后，能够收到
第一个字符并解析出“3B”或者“3F”就表示卡和终端在默认参数下的通讯已经建立起来了。

既然ATR是卡片和终端说的第一句话，终端自然希望卡片能多透露些信息，以免让终端在后续的对话中茫然无措。
从终端的角度看，主要想了解的就是如下信息：1）卡片支持的通讯协议是T=0还是T=1，或者是其他的T = X ？2）
除了默认参数卡片是否还支持其他的通讯参数？3）和某些行业应用有关的特殊信息。

在ATR的第二个字符T0中就给出了这些必要的信息是如何在ATR中存在的。T0的高4位用来指出是否存在表示通讯
协议以及通讯参数的“接口字节”TA(b5)、TB(b6)、TC(b7)、TD(b8)（当然如果不存在接口字节，则使用默认的协议与通讯参数），
T0的低4位则用来指出可以反映卡片自定义信息的历史字节个数。

在某些行业应用规范里会对历史字节有明确的规定，用来区分芯片商、卡商、COS版本等，
同时可能还会规定用某些历史字节来作为卡片密钥分散的分散因子。

那么这些通讯参数有哪些呢？主要包括通讯协议，字符传输速率，以及超时等待时间和数据块的大小等。

接口字节采用逐层嵌套的方式来表示的，第一层TA1、TB1、TC1、TD1是否存在由T0的高4位决定，
第二层TA2、TB2、TC2、TD2是否存在则由TD1的高4位决定，依此类推，每层的TDi的高4位都决定了
下一层的TA(i+1):b5、TB(i+1):b6、TC(i+1):b7、TD(i+1):b8是否存在(相应bit位为1则存在，为0则不存在)。
每层的TDi的低4位都决定参数T 协议(T=0/T=1/T=15 ...)参考和/或接口字节限制符,T=0表示按字节传输apdu,T=1
表示按数据块传输apdu

如果卡片在ATR里给出的信息表明其可以支持若干种通讯协议，终端该如何和它打交道呢？
相当于卡片用默认的“英语”告诉终端“I can speak English, Chinese, Japanese, French。”

这个时候终端可以进行协议选择（PPS）也可以不选择直接使用默认协议，如果进行协议选择的话，
那么PPS就是终端在收到ATR后发出的第一个指令，相当于终端告诉卡片“OK, Let’s speak in Chinese !”，
然后它们“就可以用中文拉呱了”。如果不进行协议选择的话，终端则使用默认的协议给卡片发送其他的APDU指令，
相当于二者使用默认的英语进行后续对话，“Could you please bring me a cup of coffee? ”，
“OK, What’s your prefer? ”，“Cappuccino”，“Here you are. ”
